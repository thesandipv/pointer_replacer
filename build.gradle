/*
 * Copyright (C) 2016-2021 Sandip Vaghela
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    def version = [
            MAJOR: 1,
            MINOR: 10,
            PATCH: 0,
    ]

    ext.SDK = [
            MIN    : 19,
            COMPILE: 31,
            TARGET : 31
    ]

    ext.VERSION_CODE = SDK.MIN * 10000000 + version.MAJOR * 10000 + version.MINOR * 100 + version.PATCH
    ext.VERSION_NAME = "${version.MAJOR}.${version.MINOR}.${version.PATCH}"

//    apply from: rootProject.file('gradle/deps.gradle')
//    apply from: rootProject.file('gradle/test.gradle.kts')

    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath libs.agp
        classpath libs.kotlin.pluginGradle
        classpath libs.google.pluginGservices
        classpath libs.firebase.pluginCrashlytics
        classpath libs.google.pluginOssLic
        classpath libs.androidx.navigation.pluginSafeArgs
        classpath libs.hilt.pluginGradle
    }
}

plugins {
    alias(libs.plugins.spotless)
//    alias(libs.plugins.depUpdates)
}

allprojects {
    def publishPropertiesFile = rootProject.file("publish.properties")
    def properties = new Properties()
    if (publishPropertiesFile.exists()) {
        properties.load(new FileInputStream(publishPropertiesFile))
    }
    repositories {
        google()
        maven { url "https://jitpack.io" }
        mavenCentral()
        maven {
            name = "github-afterroot-core"
            url = uri("https://maven.pkg.github.com/afterroot/core")
            credentials {
                username = properties.getProperty("gpr.user") ?: System.getenv("GHUSERNAME")
                password = properties.getProperty("gpr.key") ?: System.getenv("GHTOKEN")
            }
        }
    }
}

subprojects {
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            // Treat all Kotlin warnings as errors
            // allWarningsAsErrors = true

            // Enable experimental coroutines APIs, including Flow
            freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"
            freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.FlowPreview"
            freeCompilerArgs += "-Xopt-in=kotlin.Experimental"

            // Set JVM target to 1.8
            jvmTarget = "1.8"
        }
    }

    apply plugin: 'com.diffplug.spotless'
    spotless {
        format 'misc', {
            // define the files to apply `misc` to
            target '*.gradle', '*.md', '.gitignore'
            indentWithSpaces()
            // define the steps to apply to those files
            trimTrailingWhitespace()
            endWithNewline()
        }
        kotlin {
            target '**/*.kt'
            targetExclude("$buildDir/**/*.kt")
            targetExclude('bin/**/*.kt')

            ktlint(libs.versions.ktlint.get())
        }
    }
}

task clean2(type: Delete) {
    delete rootProject.buildDir
}

tasks.withType(Test) {
    environment 'Test', true
//    testLogging.showStandardStreams = Boolean.parseBoolean(findProperty('showStandardStreams'))
}
