/*
 * Copyright (C) 2016-2021 Sandip Vaghela
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import com.afterroot.allusive2.buildSrc.DependencyUpdates
import com.afterroot.allusive2.buildSrc.ReleaseType

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    apply from: rootProject.file('gradle/deps.gradle')

    repositories {
        google()
        maven { url "https://jitpack.io" }
        mavenCentral()
    }
    dependencies {
        classpath Libs.AGP
        classpath Libs.Kotlin.gradlePlugin
        classpath Libs.Google.servicesPlugin
        classpath Libs.Firebase.crashlyticsPlugin
        classpath Libs.Google.ossLicPlugin
        classpath Libs.AndroidX.Navigation.safeArgsPlugin
    }
}

plugins {
    id 'com.diffplug.spotless' version '5.12.5'
    id 'com.github.ben-manes.versions' version '0.39.0'
}

allprojects {
    apply from: rootProject.file('gradle/deps.gradle')

    def publishPropertiesFile = rootProject.file("publish.properties")
    def properties = new Properties()
    if (publishPropertiesFile.exists()) {
        properties.load(new FileInputStream(publishPropertiesFile))
    }
    repositories {
        google()
        jcenter()
        maven { url "https://jitpack.io" }
        mavenCentral()
        maven {
            name = "github-afterroot-core"
            url = uri(Libs.AfterROOT.Core.mavenUrl)
            credentials {
                username = properties.getProperty("gpr.user") ?: System.getenv("GHUSERNAME")
                password = properties.getProperty("gpr.key") ?: System.getenv("GHTOKEN")
            }
        }
    }
}

subprojects {
    tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
        kotlinOptions {
            // Treat all Kotlin warnings as errors
            // allWarningsAsErrors = true

            // Enable experimental coroutines APIs, including Flow
            freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"
            freeCompilerArgs += "-Xopt-in=kotlinx.coroutines.FlowPreview"
            freeCompilerArgs += "-Xopt-in=kotlin.Experimental"

            // Set JVM target to 1.8
            jvmTarget = "1.8"
        }
    }

    apply plugin: 'com.diffplug.spotless'
    spotless {
        kotlin {
            target '**/*.kt'
            targetExclude("$buildDir/**/*.kt")
            targetExclude('bin/**/*.kt')

            ktlint(Versions.ktlint)
            //licenseHeaderFile rootProject.file('copyright.kt')
        }
    }
}

/**
 * Update dependencyUpdates task to reject versions which are more 'unstable' than our
 * current version.
 */
tasks.named("dependencyUpdates").configure {
    rejectVersionIf {
        def current = DependencyUpdates.versionToRelease(it.currentVersion)
        // If we're using a SNAPSHOT, ignore since we must be doing so for a reason.
        if (current == ReleaseType.SNAPSHOT) return true

        // Otherwise we reject if the candidate is more 'unstable' than our version
        def candidate = DependencyUpdates.versionToRelease(it.candidate.version)
        return candidate.isLessStableThan(current)
    }
}

task clean2(type: Delete) {
    delete rootProject.buildDir
}
