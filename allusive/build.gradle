/*
 * Copyright (C) 2016-2019 Sandip Vaghela
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'
apply plugin: 'com.google.android.gms.oss-licenses-plugin'

ext {
    major = 1
    minor = 8
    patch = 8
    minimumSdkVersion = 16
}

android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.afterroot.allusive"
        minSdkVersion project.ext.minimumSdkVersion
        targetSdkVersion 29
        versionCode project.ext.minimumSdkVersion * 10000000 + project.ext.major * 10000 + project.ext.minor * 100 + project.ext.patch
        versionName "${project.ext.major}.${project.ext.minor}.${project.ext.patch}"
        vectorDrawables {
            useSupportLibrary = true
        }
        multiDexEnabled true
        buildConfigField("String", "AD_TEST_DEVICE_ID", ADMOB_TEST_DEVICE_ID)

        kapt {
            arguments {
                arg("room.schemaLocation", "$projectDir/schemas".toString())
            }
        }
    }
    signingConfigs {
        release
    }
    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            multiDexKeepProguard file('proguard-rules.pro')
            multiDexKeepFile file('main_dex.txt')
            signingConfig signingConfigs.release
        }
        debug {
            ext.alwaysUpdateBuildId = false
            splits.abi.enable = false
            splits.density.enable = false
            crunchPngs false

            multiDexKeepProguard file('proguard-rules.pro')
            multiDexKeepFile file('main_dex.txt')
        }
    }
    dexOptions {
        javaMaxHeapSize "4g"
        preDexLibraries = false
    }
    flavorDimensions 'ar'
    productFlavors {
        dev {
            dimension = 'ar'
            resConfigs('en', 'xhdpi')
            versionNameSuffix = '-beta'
        }

        prod {
            dimension = 'ar'
        }
    }
    compileOptions {
        sourceCompatibility = 1.8
        targetCompatibility = 1.8
    }
    buildToolsVersion = '29.0.3'

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }
    lintOptions {
        abortOnError false
    }

    if (System.getenv("CI") == "true") {
//        signingConfigs {
//            release {
//                storeFile = file("../keystore.jks")
//                storePassword = System.getenv("keystore_pass")
//                keyAlias = System.getenv("key_alias")
//                keyPassword = System.getenv("key_pass")
//            }
//        }
        productFlavors {
            dev {
                dimension = 'ar'
                versionNameSuffix = '-CI'
                applicationIdSuffix = '.ci'
            }

            prod {
                dimension = 'ar'
                versionNameSuffix = '-CI'
                applicationIdSuffix = '.ci'
            }
        }
    }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.anko:anko-commons:${ankoCommonsVersion}"

    implementation "androidx.appcompat:appcompat:${appcompatVersion}"
    implementation "androidx.cardview:cardview:${cardviewVersion}"
    implementation "androidx.constraintlayout:constraintlayout:${constraintlayoutVersion}"
    implementation "androidx.core:core-ktx:${coreKtxVersion}"
    implementation "androidx.fragment:fragment-ktx:${fragmentKtxVersion}"
    implementation "androidx.legacy:legacy-support-v13:${legacySupportV13Version}"
    implementation "androidx.legacy:legacy-support-v4:${legacySupportV4Version}"
    implementation "androidx.lifecycle:lifecycle-common-java8:${lifecycleVersion}"
    implementation "androidx.lifecycle:lifecycle-extensions:${lifecycleVersion}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${lifecycleVersion}"
    implementation "androidx.multidex:multidex:${multidexVersion}"
    implementation "androidx.navigation:navigation-fragment-ktx:${navigationVersion}"
    implementation "androidx.navigation:navigation-ui-ktx:${navigationVersion}"
    implementation "androidx.paging:paging-runtime-ktx:${pagingVersion}"
    implementation "androidx.preference:preference:${preferenceVersion}"
    implementation "androidx.recyclerview:recyclerview:${recyclerviewVersion}"
    implementation "androidx.room:room-ktx:${roomKtxVersion}"
    implementation "androidx.room:room-runtime:${roomKtxVersion}"
    implementation "androidx.vectordrawable:vectordrawable:${vectordrawableVersion}"
    implementation "com.android.billingclient:billing:${billingVersion}"
    kapt "androidx.room:room-compiler:${roomKtxVersion}"

    implementation "com.afollestad.material-dialogs:input:${materialDialogsVersion}"
    implementation "com.afollestad.material-dialogs:core:${materialDialogsVersion}"
    implementation "com.afollestad.material-dialogs:bottomsheets:${materialDialogsVersion}"
    implementation "com.afollestad.material-dialogs:color:${materialDialogsVersion}"

    implementation "com.crashlytics.sdk.android:crashlytics:${crashlyticsVersion}"

    implementation "com.firebaseui:firebase-ui-auth:${firebaseUiAuthVersion}"
    implementation "com.firebaseui:firebase-ui-firestore:${firebaseUiFirestoreVersion}"
    implementation "com.firebaseui:firebase-ui-storage:${firebaseUiStorageVersion}"

    implementation "com.github.bumptech.glide:glide:${glideVersion}"
    kapt "com.github.bumptech.glide:compiler:${glideVersion}"

    implementation 'com.google.android.gms:play-services-oss-licenses:17.0.0'
    implementation "com.google.android.material:material:${googleMaterialVersion}"
    implementation "com.google.code.gson:gson:${gsonVersion}"
    implementation "com.google.firebase:firebase-ads:${firebaseAdsVersion}"
    implementation "com.google.firebase:firebase-auth:${firebaseAuthVersion}"
    implementation "com.google.firebase:firebase-config:${firebaseConfigVersion}"
    implementation "com.google.firebase:firebase-core:${firebaseCoreVersion}"
    implementation "com.google.firebase:firebase-firestore-ktx:${firebaseFirestoreVersion}"
    implementation "com.google.firebase:firebase-messaging:${firebaseMessagingVersion}"
    implementation "com.google.firebase:firebase-storage:${firebaseStorageVersion}"

    implementation "org.apache.commons:commons-io:${commonsIoVersion}"
    compileOnly "de.robv.android.xposed:api:${xposedAPIVersion}"

    implementation "org.koin:koin-android:${koinVersion}"
    implementation "org.koin:koin-androidx-scope:${koinVersion}"
    implementation "org.koin:koin-androidx-viewmodel:${koinVersion}"

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${kotlinxCoroutinesVersion}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${kotlinxCoroutinesVersion}"
    testImplementation 'junit:junit:4.13'
    implementation project(":core")
}
apply plugin: 'com.google.gms.google-services'
